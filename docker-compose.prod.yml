version: '3.8'

services:
  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: twingrid-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - twingrid-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: twingrid-frontend
    restart: unless-stopped
    ports:
      - "80:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - twingrid-network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: twingrid-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - twingrid-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: twingrid-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - twingrid-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Traefik (Reverse Proxy)
  traefik:
    image: traefik:v2.10
    container_name: twingrid-traefik
    restart: unless-stopped
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.leresolver.acme.httpchallenge=true
      - --certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.leresolver.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/letsencrypt:/letsencrypt
    networks:
      - twingrid-network

  # Database Backup
  backup:
    image: postgres:15-alpine
    container_name: twingrid-backup
    restart: on-failure
    volumes:
      - ./backups:/backups
    environment:
      - PGHOST=db
      - PGPORT=5432
      - PGUSER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    command: >
      /bin/sh -c '
        echo "$${CRON_SCHEDULE:-0 2 * * *} /backup.sh" > /etc/crontabs/root
        chmod +x /backup.sh
        crond -f
      '
    entrypoint: |
      /bin/sh -c 'echo "$$(cat <<'EOF'
      #!/bin/sh
      BACKUP_DATE=$$(date +%Y%m%d_%H%M%S)
      pg_dump -Fc -f /backups/backup_$${BACKUP_DATE}.dump
      find /backups -type f -name "backup_*.dump" -mtime +7 -delete
      EOF
      )" > /backup.sh'
    
    depends_on:
      - db
    networks:
      - twingid-network

networks:
  twingrid-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
